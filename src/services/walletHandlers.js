const { toUserFriendlyAddress } = require('@tonconnect/sdk');
const { getWalletInfo } = require('../tonConnect/wallets');
const { editTonAddress } = require('../utils/editTonAddress');
const { generateQRCode, getConnector } = require('../tonConnect/connector');
const { getData } = require('../utils/getBalance');
const { updateUserAddressAndBalance, getUserById, getUserByAddress } = require('../db');
const { generateProfileKeyboard } = require('./keyboardUtils');
const bot = require('../bot');
const { admins, chats } = require('../utils/config');

async function handleProfile(chatId, messageId) {
  try {
    const user = getUserById(chatId);

    if (!user) {
      await bot.editMessageText('–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', {
        chat_id: chatId,
        message_id: messageId,
      });
      return;
    }

    const address = editTonAddress(user.address) || '–ù–µ –ü–æ–¥–∫–ª—é—á–µ–Ω';
    const balance = new Intl.NumberFormat('en-US').format(user.balance || 0);

    const options = generateProfileKeyboard(address);

    await bot.editMessageText(
      `üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n` +
      `<b>–ò–º—è:</b> <code>${user.id}</code>\n` +
      `<b>–ò–º—è:</b> ${user.name}\n` +
      `<b>Username:</b> @${user.username}\n` +
      `<b>–ê–¥—Ä–µ—Å:</b> <code>${address}</code>\n` +
      `<b>–ë–∞–ª–∞–Ω—Å:</b> ${balance}`,
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML',
        reply_markup: options,
      }
    );
  } catch (error) {
    console.error('Error fetching profile data:', error);
    bot.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.', {
      chat_id: chatId,
      message_id: messageId,
    });
  }
}

async function handleDisconnectWallet(chatId, messageId) {
  updateUserAddressAndBalance(chatId, null, 0);

  const keyboard = generateProfileKeyboard('–ù–µ –ü–æ–¥–∫–ª—é—á–µ–Ω');

  await bot.editMessageText('üîë –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: keyboard,
  }); 
}

async function handleWalletConnection(chatId, walletName, messageId) {
  try {
    const walletInfo = await getWalletInfo(walletName);

    if (!walletInfo) {
      await bot.editMessageText(`–ö–æ—à–µ–ª–µ–∫ ${walletName} –Ω–µ –Ω–∞–π–¥–µ–Ω.`, {
        chat_id: chatId,
        message_id: messageId,
      });
      return;
    }

    await bot.deleteMessage(chatId, messageId);

    const connector = getConnector(chatId);
    let qrMessageId;

    connector.onStatusChange(async (wallet) => {
      if (wallet) {
        const userFriendlyAddress = toUserFriendlyAddress(wallet.account.address);

        const existingUser = getUserByAddress(userFriendlyAddress);

        if (existingUser) {
          if (qrMessageId) {
            await bot.deleteMessage(chatId, qrMessageId);
          }

          await bot.sendMessage(
            chatId,
            '‚ùå –î–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ —É–∂–µ –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω —Ä–∞–Ω–µ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ—à–µ–ª–µ–∫.',
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'Tonkeeper', callback_data: 'Tonkeeper' },
                    { text: 'MyTonWallet', callback_data: 'MyTonWallet' },
                    { text: 'TonHub', callback_data: 'TonHub' },
                  ],
                ],
              },
            }
          );
          return; 
        }

        try {
          const rawBalance = await getData(userFriendlyAddress);
          const balance = new Intl.NumberFormat('en-US').format(rawBalance);

          updateUserAddressAndBalance(chatId, userFriendlyAddress, rawBalance);

          if (qrMessageId) {
            await bot.deleteMessage(chatId, qrMessageId);
          }

          bot.sendMessage(
            chatId,
            `üéâ <b>${wallet.device.appName}</b> –ö–æ—à–µ–ª–µ–∫ –ü–æ–¥–∫–ª—é—á–µ–Ω!\n–ê–¥—Ä–µ—Å: <code>${editTonAddress(userFriendlyAddress)}</code>\n<b>$LUDOMAN: </b><code>${balance}</code>`,
            {
              parse_mode: 'HTML',
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: '–ü—Ä–æ—Ñ–∏–ª—å üë§', callback_data: 'Profile' },
                  ],
                ],
              },
            }
          );
        } catch (error) {
          console.error('Failed to fetch wallet balance:', error);
          if (qrMessageId) {
            await bot.deleteMessage(chatId, qrMessageId);
          }
          bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ $LUDOMAN. –ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.', {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'Blum üóÉ', url: 'https://t.me/blum/app?startapp=memepadjetton_LUDOMAN_hFG7q-ref_Y9kokQfbIr'},
                  { text: 'STON.fi üíé', url: 'https://app.ston.fi/swap?chartVisible=false&chartInterval=1w'},
                  { text: 'BigPump ‚ñ∂Ô∏è', url: 'https://t.me/pocketfi_bot/bigpump?startapp=vlady_uk_8859-eyJjb2luSWQiOiI4NDEzNiJ9'},
                ],
                [
                  { text: 'Tonkeeper', callback_data: 'Tonkeeper' },
                  { text: 'MyTonWallet', callback_data: 'MyTonWallet' },
                  { text: 'TonHub', callback_data: 'TonHub' },
                ],
              ],
            },
          });
        }
      } else {
        bot.sendMessage(chatId, '–ö–æ—à–µ–ª–µ–∫ –û—Ç–∫–ª—é—á–µ–Ω.');
      }
    });

    const link = connector.connect({
      bridgeUrl: walletInfo.bridgeUrl,
      universalLink: walletInfo.universalLink,
    });

    const qrCode = await generateQRCode(link);

    const sentMessage = await bot.sendPhoto(chatId, qrCode, {
      caption: `–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR Code, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å ${walletName} –ö–æ—à–µ–ª–µ–∫.`,
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ö–æ—à–µ–ª–µ–∫ üëõ',
              url: link,
            },
          ],
        ],
      },
    });

    qrMessageId = sentMessage.message_id;
  } catch (error) {
    console.error('Error handling wallet connection:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

async function handlePrivateChat(chatId, messageId, bot) {
  await bot.editMessageText(
    '–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:\n\n' +
    '‚¨ÜÔ∏è –£—Ä–æ–≤–Ω–∏:\n' +
    '500K, 2M, 10M $LUDOMAN.',
    {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'Low ¬∑ 500K ‚ö°Ô∏è', url: chats.lowLevel.url },
          ],
          [
            { text: 'Medium ¬∑ 2M üåü', url: chats.mediumLevel.url },
          ],
          [
            { text: 'High ¬∑ 10M üíé', url: chats.highLevel.url },
          ],
          [
            { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'BackToMenu' },
          ],
        ],
      },
    }
  );
}

module.exports = {
  handleProfile,
  handleDisconnectWallet,
  handleWalletConnection,
  handlePrivateChat
};